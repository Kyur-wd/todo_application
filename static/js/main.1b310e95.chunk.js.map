{"version":3,"sources":["components/Header.jsx","components/Nav.jsx","components/TodoItem.jsx","components/Todos.jsx","components/Footer.jsx","components/App.jsx","index.js"],"names":["Header","state","quote","_this2","this","fetch","then","response","json","data","setState","contents","quotes","_this3","react_default","a","createElement","web","from","opacity","marginTop","to","props","className","style","Component","Nav","buttons","btnAll","isDisabled","todoCounts","all","styles","setting","btnNotCompleted","notCompleted","btnCompleted","completed","button","currentFilter","concat","disabled","onClick","setFilter","TodoItem","showDeleteButtonIfNotCompleted","styleIfCompleted","todoData","isCompleted","name","event","handleChange","id","type","checked","onChange","placeholder","value","text","Todos","Fragment","items","todos","keys","todo","transform","enter","leave","styleProps","components_TodoItem","shouldShowNewTodoButton","addNewTodo","Footer","countTodosPerCategory","length","filter","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","todoObjects","currentlyShowing","bind","assertThisInitialized","setWhichTodosToShow","_event$target","target","indexToDelete","prevState","newTodos","map","index","splice","newTodoID","lastIndex","newTodo","push","todosToShow","components_Header","components_Nav","components_Todos","components_Footer","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.1b310e95.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Spring } from \"react-spring\";\r\n\r\nclass Header extends Component {\r\n  state = {\r\n    quote: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\"http://quotes.rest/qod.json?category=inspire\")\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ quote: data.contents.quotes[0].quote }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Spring\r\n        from={{ opacity: 0, marginTop: -100 }}\r\n        to={{ opacity: 1, marginTop: 0 }}\r\n      >\r\n        {props => (\r\n          <header className=\"header\" style={props}>\r\n            <h2 className=\"quote\">\r\n              {this.state.quote === \"\"\r\n                ? \"Loading content...\"\r\n                : this.state.quote}\r\n            </h2>\r\n          </header>\r\n        )}\r\n      </Spring>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Nav = props => {\r\n  const buttons = {\r\n    btnAll: {\r\n      isDisabled: props.todoCounts.all <= 0,\r\n      styles: \"\",\r\n      setting: \"all\"\r\n    },\r\n    btnNotCompleted: {\r\n      isDisabled: props.todoCounts.notCompleted <= 0,\r\n      styles: \"\",\r\n      setting: \"notCompleted\"\r\n    },\r\n    btnCompleted: {\r\n      isDisabled: props.todoCounts.completed <= 0,\r\n      styles: \"\",\r\n      setting: \"completed\"\r\n    }\r\n  };\r\n\r\n  for (let button in buttons) {\r\n    if (!buttons[button].isDisabled) {\r\n      buttons[button].styles = \"nav-button-enabled\";\r\n      if (props.currentFilter === buttons[button].setting)\r\n        buttons[button].styles = \"nav-button-active\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <button\r\n        className={`nav-button ${buttons.btnAll.styles}`}\r\n        disabled={buttons.btnAll.isDisabled}\r\n        onClick={() => props.setFilter(buttons.btnAll.setting)}\r\n      >\r\n        All [{props.todoCounts.all}]\r\n      </button>\r\n      <button\r\n        className={`nav-button ${buttons.btnNotCompleted.styles}`}\r\n        disabled={buttons.btnNotCompleted.isDisabled}\r\n        onClick={() => props.setFilter(buttons.btnNotCompleted.setting)}\r\n      >\r\n        Not Completed [{props.todoCounts.notCompleted}]\r\n      </button>\r\n      <button\r\n        className={`nav-button ${buttons.btnCompleted.styles}`}\r\n        disabled={buttons.btnCompleted.isDisabled}\r\n        onClick={() => props.setFilter(buttons.btnCompleted.setting)}\r\n      >\r\n        Completed [{props.todoCounts.completed}]\r\n      </button>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\n\r\nconst TodoItem = props => {\r\n  // Zeigt Delete Button an, falls Todo noch nicht erledigt ist.\r\n  let showDeleteButtonIfNotCompleted = null;\r\n  let styleIfCompleted = null;\r\n  if (!props.todoData.isCompleted) {\r\n    showDeleteButtonIfNotCompleted = (\r\n      <button\r\n        name=\"btnDeleteTodo\"\r\n        className=\"delete-todo-button\"\r\n        onClick={event => props.handleChange(event, props.todoData.id)}\r\n      >\r\n        <span className=\"far fa-trash-alt\" />\r\n      </button>\r\n    );\r\n  } else {\r\n    styleIfCompleted = \"todo-completed\";\r\n  }\r\n\r\n  return (\r\n    <div className={`todo ${styleIfCompleted}`} style={props.styles}>\r\n      <input\r\n        className=\"todo-checkbox\"\r\n        type=\"checkbox\"\r\n        checked={props.todoData.isCompleted}\r\n        onChange={event => props.handleChange(event, props.todoData.id)}\r\n      />\r\n      <input\r\n        placeholder=\"enter text here\"\r\n        name=\"todoText\"\r\n        type=\"text\"\r\n        className=\"todo-text\"\r\n        value={props.todoData.text}\r\n        onChange={event => props.handleChange(event, props.todoData.id)}\r\n        disabled={props.todoData.isCompleted ? true : false}\r\n      />\r\n      {showDeleteButtonIfNotCompleted}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport { Transition } from \"react-spring\";\r\n\r\nconst Todos = props => {\r\n  return (\r\n    <React.Fragment>\r\n      <main>\r\n        <h1 className=\"heading\">- Your Todos -</h1>\r\n        <div className=\"todo-container\">\r\n          <Transition\r\n            items={props.todos}\r\n            keys={todo => todo.id}\r\n            from={{ transform: \"translate3d(0,-40px,0)\", opacity: 0 }}\r\n            enter={{ transform: \"translate3d(0,0px,0)\", opacity: 1 }}\r\n            leave={{ transform: \"translate3d(0,-40px,0)\", opacity: 0 }}\r\n          >\r\n            {todo => styleProps => (\r\n              <TodoItem\r\n                styles={styleProps}\r\n                todoData={todo}\r\n                handleChange={props.handleChange}\r\n              />\r\n            )}\r\n          </Transition>\r\n          {props.shouldShowNewTodoButton && (\r\n            <button className=\"new-note-button\" onClick={props.addNewTodo}>\r\n              Click here to add a new todo\r\n            </button>\r\n          )}\r\n        </div>\r\n      </main>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Todos;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <p>App created by Bilal Ahmad</p>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\r\nimport Header from \"./Header\";\r\nimport Nav from \"./Nav\";\r\nimport Todos from \"./Todos\";\r\nimport Footer from \"./Footer\";\r\nimport \"../index.css\";\r\n//import { Spring, config } from \"react-spring\";\r\n\r\n// Gibt Array mit Todos zurück, die angezeigt werden sollen, je nach ausgewähltem Filter\r\nfunction filterTodosToShow(todos, filter) {\r\n  let todosToShow = null;\r\n  if (filter === \"all\") {\r\n    todosToShow = todos;\r\n  } else if (filter === \"completed\") {\r\n    todosToShow = todos.filter(todo => {\r\n      if (todo.isCompleted) {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n  } else {\r\n    todosToShow = todos.filter(todo => {\r\n      if (!todo.isCompleted) {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n  }\r\n\r\n  return todosToShow;\r\n}\r\n\r\n// Zählt alle Todos nach Kategorie (Erledigt, nicht erledigt und alle)\r\nfunction countTodosPerCategory(todos) {\r\n  const all = todos.length;\r\n  if (all <= 0) return { all: 0, notCompleted: 0, completed: 0 };\r\n\r\n  const notCompleted = todos.filter(todo => !todo.isCompleted).length;\r\n  const completed = all - notCompleted;\r\n\r\n  return { all, notCompleted, completed };\r\n}\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      todoObjects: [],\r\n      currentlyShowing: \"all\"\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.addNewTodo = this.addNewTodo.bind(this);\r\n    this.setWhichTodosToShow = this.setWhichTodosToShow.bind(this);\r\n  }\r\n\r\n  // Wird bei Interaktion mit Todo-Item ausgelöst (Delete Button, Text geändert, Checkbox getickt, ...)\r\n  handleChange(event, id) {\r\n    const { type, value, name } = event.target;\r\n    let indexToDelete = null;\r\n    this.setState(prevState => {\r\n      let newTodos = prevState.todoObjects.map((todo, index) => {\r\n        if (todo.id === id) {\r\n          // Checkbox wurde geklickt, also Status ändern (Angehakt oder nicht)\r\n          if (type === \"checkbox\") {\r\n            todo.isCompleted = !todo.isCompleted;\r\n            // Text wurde in Todo Textbox eingegeben - Value anpassen\r\n          } else if (name === \"todoText\") {\r\n            todo.text = value;\r\n            // Todo Delete Button wurde geklickt, Todo wird aus neuem Array entfernt\r\n          } else if (name === \"btnDeleteTodo\") {\r\n            indexToDelete = index;\r\n          }\r\n        }\r\n        return todo;\r\n      });\r\n\r\n      if (indexToDelete !== null) {\r\n        newTodos.splice(indexToDelete, 1);\r\n      }\r\n\r\n      return {\r\n        todoObjects: newTodos\r\n      };\r\n    });\r\n  }\r\n\r\n  // Neues leeres Todo-Item wird hinzugefügt\r\n  addNewTodo() {\r\n    this.setState(prevState => {\r\n      let newTodoID = 0;\r\n      let lastIndex = 0;\r\n\r\n      if (prevState.todoObjects.length > 0) {\r\n        lastIndex = prevState.todoObjects.length - 1;\r\n        newTodoID = prevState.todoObjects[lastIndex].id + 1;\r\n      }\r\n\r\n      const newTodo = { id: newTodoID, text: \"\", isCompleted: false };\r\n      prevState.todoObjects.push(newTodo);\r\n\r\n      return {\r\n        todoObjects: prevState.todoObjects\r\n      };\r\n    });\r\n  }\r\n\r\n  // Setzt anhand eines übergebenen Strings, welche Todos angezeigt werden sollen\r\n  setWhichTodosToShow(filter) {\r\n    this.setState({ currentlyShowing: filter });\r\n  }\r\n\r\n  render() {\r\n    const todosToShow = filterTodosToShow(\r\n      this.state.todoObjects,\r\n      this.state.currentlyShowing\r\n    );\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Header />\r\n        <Nav\r\n          todoCounts={countTodosPerCategory(this.state.todoObjects)}\r\n          setFilter={this.setWhichTodosToShow}\r\n          currentFilter={this.state.currentlyShowing}\r\n        />\r\n        <Todos\r\n          todos={todosToShow}\r\n          handleChange={this.handleChange}\r\n          addNewTodo={this.addNewTodo}\r\n          shouldShowNewTodoButton={\r\n            this.state.currentlyShowing === \"completed\" ? false : true\r\n          }\r\n        />\r\n        <Footer />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}